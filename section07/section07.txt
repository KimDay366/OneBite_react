LifeCycle = 생애 주기 

[React LifeCycle]
1. Mount = 탄생
    - 컴포넌트가 탄생하는 순간
    - 화면에 처음 렌더링 되는 순간
    - 서버에서 데이터를 불러오는 작업

2. Update = 변화
    - 컴포넌트가 다시 렌더링 되는 순간
    - 리렌더링 될 때를 의미함
    - 어떤 값이 변경되었는지 콘솔에 출력

3. UnMount = 죽음
    - 컴포넌트가 화면에서 사라지는 순간
    - 렌더링에서 제외 되는 순간을 의미
    - 컴포넌트가 사용하던 메모리 정리

    => 라이프사이클 제어 ( = useEffect)


==============================================================

useEffect : 리액트 컴포넌트의 사이드 이펙트(=부수적인 효과, 파생되는 효과)를 제어하는 새로운 React Hook
            예시 - 컴포넌트 내부의 값 변경 시 "콘솔에 변경 된 값 출력 = 사이드 이펙트"

[ useEffect 사용하기 ]
useEffect( ()=>{}, []);
왼쪽은 콜백함수, 오른쪽은 배열을 사용해서 useEffect를 사용하는데,
배열의 값이 변동되면 콜백함수가 실행되는 구조 
[] : 의존성 배열, dependency array, deps

예시
useEffect(()=>{
    console.log(`count number : ${countNum} / input : ${input}`);
},[countNum, input]);


+ useEffect를 사용하는 이유
    : useState에서 사용한 함수는 비동기로 이루어 지는 값이기 때문에, 
      해당 함수가 위치 한 곳에서 State를 불러오게 되면 이전 값이 나오게 됨.
      따라서, State가 제대로 변경 됬는지 정확히 확인 하기 위해 useEffect를 사용해야 함 