
// 동기란?
// 여러 작업이 있는 경우, 한번에 하나씩 순서대로 처리하는 과정
// Tast A → Tast B → Task C ... 
// => 쓰레드(Thread), 직접 실행하고 순서대로 처리해 주는 역할

// JS 동기 장점 : 쓰레드의 순서를 금방 파악 할 수 있다
// JS 동기 단점 : 쓰레드 진행 중 중간에 걸린 함수의 처리 시간이 오래 걸리면 다른 작업이 모두 밀리게 되며 부하가 걸릴 수 있다

// 다른 개발 언어 개선 방법 : 멀티 쓰레드 기법
// 쓰레드를 여러 개 두어서 각각 동시에 시작 할 수 있도록 하는것
// 쓰레드 A → Tast A ---→ 종료
// 쓰레드 B → Tast B ------------→ 종료
// 쓰레드 C → Task C -----→ 종료




// JS 엔진에는 쓰레드가 1개밖에 없음 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ
// 그래서 JS 엔진은 "동기" 방식으로 작업을 처리 함



// 비동기란?
// 동기와 반대로, 작업을 순서대로 처리하지 않음

// 쓰레드 1개로 여러 작업을 동시 시작 & 결과물에 대한 CallBack 가능
// 쓰레드 A → Tast A --→ 종료
//         → Tast B ---------→ 종료 (비동기를 만나면 Web APIs에서 실행)
//         → Task C ----→ 종료
// 중간에 [Task B = 비동기]를 만나면 Web APIs로 작업을 넘겨서 작업 하다가
// callback 처리 시간이 되면 다시 JS엔진에게 작업 전달
// 한마디로 웹 브라우저 내 Web APIs에 임시 처리를 맡김


// JS의 기본 : 동기 방식 확인
console.log(1);
console.log(2);


// JS의 비동기 처리 방법
console.log(4);
// setTimeout(콜백함수, 딜레이 시간 )
// 비동기형 특수 함수, 원하는 시간(단위:ms, 1000ms = 1s) 뒤에 실행하는 함수 
setTimeout(()=>{console.log(5)}, 1000); 
// setTimeout()과 내부 함수를 Web APIs로 넘겨서 대기 시킴
console.log(6);
